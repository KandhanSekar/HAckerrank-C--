Fireball* fbl = dynamic_cast<Fireball*>(spell);
if (fbl != NULL) {
    fbl->revealFirepower();
    return;
}

Frostbite* fbi = dynamic_cast<Frostbite*>(spell);
if (fbi != NULL) {
    fbi->revealFrostpower();
    return;
}

Thunderstorm* ts = dynamic_cast<Thunderstorm*>(spell);
if (ts != NULL) {
    ts->revealThunderpower();
    return;
}

Waterbolt* wtb = dynamic_cast<Waterbolt*>(spell);
if (wtb != NULL) {
    wtb->revealWaterpower();
    return;
}
    
string jou = SpellJournal::journal;
string name = spell->revealScrollName();
int m = name.length();
int n = jou.length();
                    
typedef vector<int> A;
typedef vector<A> MATRIX;                    
MATRIX L;

L.resize(m + 1);
for (int i = 0; i <= m; i++) {
	L[i].resize(n + 1);
}
                    
for (int i=0; i <= m; i++) 
    for (int j=0; j<=n; j++)
    	if (i == 0 || j == 0)
			L[i][j] = 0;
		else if (name[i-1] == jou[j-1])
			L[i][j] = L[i-1][j-1] + 1;
		else
        	L[i][j] = max(L[i-1][j], L[i][j-1]);
                    
cout << L[m][n] << endl;